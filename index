<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>30‚ÄëMin Gym Checklist (Beginner, RPE ~6)</title>
<style>
  :root {
    --bg: #0b0c10;
    --panel: #111217;
    --muted: #9aa1aa;
    --text: #eef1f4;
    --accent: #6ee7b7;
    --accent2: #60a5fa;
    --border: #23252d;
    --danger: #ef4444;
    --warn: #f59e0b;
  }
  * { box-sizing: border-box; }
  html, body { margin: 0; padding: 0; background: var(--bg); color: var(--text); font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif; }
  a { color: var(--accent2); text-decoration: none; }
  a:hover { text-decoration: underline; }

  .wrap { max-width: 980px; margin: 0 auto; padding: 20px; }
  header { display: flex; gap: 16px; align-items: center; justify-content: space-between; flex-wrap: wrap; margin-bottom: 14px; }
  h1 { font-size: 20px; margin: 0; letter-spacing: 0.2px; }
  .sub { color: var(--muted); font-size: 13px; }

  .topbar { display: flex; gap: 8px; flex-wrap: wrap; align-items: center; }
  .pill { border: 1px solid var(--border); padding: 8px 10px; border-radius: 999px; background: #0f1116; color: var(--text); cursor: pointer; font-size: 13px; }
  .pill.active { background: linear-gradient(90deg, rgba(110,231,183,.12), rgba(96,165,250,.12)); border-color: #2a2f3a; }
  .btn { border: 1px solid var(--border); background: #141823; color: var(--text); padding: 8px 12px; border-radius: 10px; cursor: pointer; font-size: 13px; }
  .btn:hover { border-color: #2a2f3a; }
  .btn.primary { background: linear-gradient(90deg, rgba(110,231,183,.15), rgba(96,165,250,.15)); }
  .btn.warn { background: rgba(245,158,11,.12); border-color: rgba(245,158,11,.35); }
  .btn.danger { background: rgba(239,68,68,.12); border-color: rgba(239,68,68,.35); }

  .grid { display: grid; grid-template-columns: 1fr; gap: 12px; }
  @media (min-width: 900px) { .grid { grid-template-columns: 1fr 1fr; } }

  .card { background: var(--panel); border: 1px solid var(--border); border-radius: 14px; padding: 14px; }
  .card h2 { font-size: 16px; margin: 0 0 8px; }
  .muted { color: var(--muted); }
  .tip { background: #12161f; border: 1px dashed #273043; padding: 10px; border-radius: 10px; font-size: 13px; }

  .exercise { border: 1px solid var(--border); border-radius: 12px; padding: 10px; margin-bottom: 10px; background: #0f1218; }
  .exercise header { display: flex; justify-content: space-between; align-items: center; }
  .exercise h3 { font-size: 15px; margin: 0; }
  .exercise .how { font-size: 12px; color: var(--muted); margin-top: 6px; }
  .sets { margin-top: 8px; overflow-x: auto; }
  table { width: 100%; border-collapse: collapse; }
  th, td { border-bottom: 1px solid #1c2130; padding: 6px; font-size: 13px; text-align: left; }
  th { color: #b7bec8; font-weight: 600; }
  td .in { width: 100%; background: #0b0f18; border: 1px solid #22293a; border-radius: 8px; color: var(--text); padding: 6px 8px; }
  td .chk { width: 18px; height: 18px; }
  tr.done td { background: rgba(110,231,183,.06); }
  .small { font-size: 12px; }

  .footer { display: flex; gap: 8px; flex-wrap: wrap; margin-top: 12px; }
  .spacer { flex: 1 1 auto; }

  .legend { display: flex; gap: 10px; align-items: center; flex-wrap: wrap; font-size: 12px; color: var(--muted); }
  .badge { padding: 2px 6px; border-radius: 6px; border: 1px solid var(--border); background: #0e1320; }
  .success { color: #22c55e; }
  .warnc { color: var(--warn); }
  .dangerc { color: var(--danger); }

  .sticky-actions { position: sticky; top: 0; z-index: 10; background: linear-gradient(to bottom, rgba(11,12,16,.95), rgba(11,12,16,.75) 85%, transparent); padding: 8px 0 6px; backdrop-filter: blur(2px); }

  .hidden { display: none; }
</style>
</head>
<body>
  <div class="wrap">
    <header>
      <div>
        <h1>30‚ÄëMin Gym Checklist ‚Äî Beginner (RPE ~6)</h1>
        <div class="sub">3 days/week ‚Ä¢ ‚ÄúSomewhat hard, still comfortable‚Äù ‚Ä¢ Auto‚Äësaves to your device</div>
      </div>
      <div class="legend">
        <span class="badge"><strong>RPE 6</strong> ‚âà 4 reps in reserve</span>
        <span class="badge">Breathe smooth</span>
        <span class="badge">No maxing out</span>
      </div>
    </header>

    <div class="sticky-actions">
      <div class="topbar">
        <div id="dayTabs"></div>
        <span class="spacer"></span>
        <button class="btn" id="printBtn" title="Print or Save as PDF">üñ®Ô∏è Print</button>
        <button class="btn" id="exportBtn" title="Export your data as CSV">‚¨áÔ∏è Export CSV</button>
        <button class="btn warn" id="newWeekBtn" title="Archive current data and start fresh">üóìÔ∏è New Week</button>
        <button class="btn danger" id="resetDayBtn" title="Clear the current day only">‚ôªÔ∏è Reset Day</button>
      </div>
    </div>

    <div class="grid">
      <div class="card">
        <h2>Today's Plan</h2>
        <div id="dayContent"></div>
      </div>
      <div class="card">
        <h2>How to Use (Beginner‚Äëfriendly)</h2>
        <div class="tip">
          <p><strong>RPE ~6</strong> = finish each set like you could do ~4 more reps. No straining or holding your breath.</p>
          <ul>
            <li><strong>1)</strong> Pick your day (Day 1 / Day 2 / Day 3).</li>
            <li><strong>2)</strong> For each exercise, fill in <em>weight</em>, <em>reps</em> (or seconds), and optionally your <em>RPE</em>.</li>
            <li><strong>3)</strong> Check the box ‚úÖ when a set is done. Data saves automatically.</li>
            <li><strong>4)</strong> Tap <em>Print</em> to save a PDF, or <em>Export CSV</em> to download your data.</li>
          </ul>
          <p class="small muted">Migraine‚Äëfriendly tips: keep head/neck relaxed, breathe steady, rest longer if you feel head pressure. Lower the weight instead of pushing harder.</p>
        </div>
        <div class="tip" style="margin-top:8px;">
          <p><strong>Weekly Progress:</strong> If a weight feels easy with smooth form, add 1‚Äì2 reps next time or a small weight increase (+2.5‚Äì5 lb). If anything hurts or feels ‚Äúthrobby,‚Äù rest more or go lighter.</p>
        </div>
      </div>
    </div>
  </div>

<script>
// ---------- Data Template ----------
const TEMPLATE = {
  "Day 1 ‚Äî Push + Row + Hamstrings": [
    { name: "Leg Press", sets: 2, target: "8‚Äì12 reps", how: "Feet shoulder‚Äëwidth; lower until knees ~90¬∞; push through mid‚Äëfoot.", type: "reps" },
    { name: "Chest‚ÄëSupported Row", sets: 2, target: "8‚Äì12 reps", how: "Chest on pad/bench; pull to lower ribs; squeeze shoulder blades.", type: "reps" },
    { name: "Machine Chest Press", sets: 2, target: "8‚Äì12 reps", how: "Handles mid‚Äëchest; press smoothly; control the return.", type: "reps" },
    { name: "Seated Leg Curl", sets: 2, target: "10‚Äì15 reps", how: "Pad above heels; curl steadily; brief pause; slow back.", type: "reps" },
    { name: "Pallof Press (Cable)", sets: 2, target: "20‚Äì30 sec/side", how: "Cable chest‚Äëheight; stand side‚Äëon; press arms out; resist twist.", type: "seconds" }
  ],
  "Day 2 ‚Äî Pull + Squat Pattern + Calves": [
    { name: "Lat Pulldown", sets: 2, target: "8‚Äì12 reps", how: "Slight lean; pull bar to upper chest; elbows down; control up.", type: "reps" },
    { name: "Goblet Squat", sets: 2, target: "8‚Äì12 reps", how: "Hold weight at chest; sit between hips; stand tall.", type: "reps" },
    { name: "Seated Cable Row", sets: 2, target: "8‚Äì12 reps", how: "Neutral spine; pull to navel/low ribs; squeeze blades.", type: "reps" },
    { name: "Romanian Deadlift", sets: 2, target: "8‚Äì12 reps", how: "Soft knees; push hips back; flat back; stand tall.", type: "reps" },
    { name: "Calf Raise (Seated/Standing)", sets: 2, target: "12‚Äì15 reps", how: "Full heel drop; rise to toes; 1‚Äì2s pause.", type: "reps" }
  ],
  "Day 3 ‚Äî Shoulders + Chest/Back + Posterior Chain": [
    { name: "Machine Shoulder Press (or DB Lateral Raise)", sets: 2, target: "8‚Äì12 reps", how: "Press without shrugging; smooth down. (Lateral raise: to shoulder height.)", type: "reps" },
    { name: "Leg Extension", sets: 2, target: "10‚Äì15 reps", how: "Pad on lower shin; extend smoothly; control down.", type: "reps" },
    { name: "Incline Dumbbell Press", sets: 2, target: "8‚Äì12 reps", how: "Bench 15‚Äì30¬∞; elbows ~45¬∞; press together; control.", type: "reps" },
    { name: "Back Extension", sets: 2, target: "10‚Äì12 reps", how: "Hinge at hips; neutral spine; squeeze glutes to rise.", type: "reps" },
    { name: "Farmer Carry", sets: 2, target: "30‚Äì40 sec", how: "Stand tall; ribs down; walk steadily without swaying.", type: "seconds" }
  ]
};

// ---------- Persistence ----------
const STORAGE_KEY = "rpe6_checklist_data_v1";
const ACTIVE_DAY_KEY = "rpe6_active_day";
const WEEK_KEY = "rpe6_week_of"; // Monday of the current week
const ARCHIVES_KEY = "rpe6_archives";

function getMonday(d = new Date()) {
  const date = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate()));
  const day = date.getUTCDay(); // 0 Sun
  const diff = (day === 0 ? -6 : 1) - day; // go to Monday
  date.setUTCDate(date.getUTCDate() + diff);
  date.setUTCHours(0,0,0,0);
  return date.toISOString().substring(0,10);
}

function loadData() {
  const raw = localStorage.getItem(STORAGE_KEY);
  return raw ? JSON.parse(raw) : {};
}

function saveData(data) {
  localStorage.setItem(STORAGE_KEY, JSON.stringify(data));
}

function loadActiveDay() {
  return localStorage.getItem(ACTIVE_DAY_KEY) || Object.keys(TEMPLATE)[0];
}

function saveActiveDay(day) {
  localStorage.setItem(ACTIVE_DAY_KEY, day);
}

function currentWeek() {
  let wk = localStorage.getItem(WEEK_KEY);
  if (!wk) {
    wk = getMonday(new Date());
    localStorage.setItem(WEEK_KEY, wk);
  }
  return wk;
}

function setNewWeek() {
  const data = loadData();
  const wk = currentWeek();
  const archives = JSON.parse(localStorage.getItem(ARCHIVES_KEY) || "[]");
  archives.push({ weekOf: wk, data, archivedAt: new Date().toISOString() });
  localStorage.setItem(ARCHIVES_KEY, JSON.stringify(archives));
  localStorage.removeItem(STORAGE_KEY);
  const next = getMonday(new Date());
  localStorage.setItem(WEEK_KEY, next);
}

// ---------- UI Helpers ----------
const dayTabs = document.getElementById("dayTabs");
const dayContent = document.getElementById("dayContent");

function renderTabs() {
  dayTabs.innerHTML = "";
  const active = loadActiveDay();
  Object.keys(TEMPLATE).forEach(dayName => {
    const btn = document.createElement("button");
    btn.className = "pill" + (active === dayName ? " active" : "");
    btn.textContent = dayName.split(" ‚Äî ")[0]; // "Day 1", "Day 2", ...
    btn.title = dayName;
    btn.onclick = () => { saveActiveDay(dayName); renderTabs(); renderDay(); };
    dayTabs.appendChild(btn);
  });
  // Show Week Of:
  const wk = currentWeek();
  const wkEl = document.createElement("span");
  wkEl.className = "pill";
  wkEl.textContent = "Week of " + wk;
  dayTabs.appendChild(wkEl);
}

function ensureDayInit(data, dayName) {
  if (!data[dayName]) {
    data[dayName] = TEMPLATE[dayName].map(ex => ({
      name: ex.name,
      how: ex.how,
      target: ex.target,
      type: ex.type,
      sets: Array.from({length: ex.sets}).map((_,i) => ({
        set: i+1, weight: "", repsOrSec: "", rpe: "", done: false
      }))
    }));
  }
}

function renderDay() {
  dayContent.innerHTML = "";
  const dayName = loadActiveDay();
  const data = loadData();
  ensureDayInit(data, dayName);
  saveData(data);

  const exList = data[dayName];
  exList.forEach((ex, exIdx) => {
    const exDiv = document.createElement("div");
    exDiv.className = "exercise";
    exDiv.innerHTML = `
      <header>
        <h3>${ex.name} <span class="muted small">(${ex.target})</span></h3>
      </header>
      <div class="how">${ex.how}</div>
      <div class="sets">
        <table>
          <thead>
            <tr>
              <th>Set</th>
              <th>Weight</th>
              <th>${ex.type === "seconds" ? "Seconds" : "Reps"}</th>
              <th>RPE</th>
              <th>Done</th>
            </tr>
          </thead>
          <tbody id="tbody-${dayName}-${exIdx}"></tbody>
        </table>
      </div>
    `;
    dayContent.appendChild(exDiv);

    const tbody = exDiv.querySelector("tbody");
    ex.sets.forEach((set, setIdx) => {
      const tr = document.createElement("tr");
      tr.className = set.done ? "done" : "";
      tr.innerHTML = `
        <td>${set.set}</td>
        <td><input class="in" type="text" inputmode="decimal" placeholder="lbs" value="${set.weight}"></td>
        <td><input class="in" type="text" inputmode="numeric" placeholder="${ex.type === "seconds" ? "sec" : "reps"}" value="${set.repsOrSec}"></td>
        <td>
          <select class="in">
            <option value="">--</option>
            <option value="5"${set.rpe=="5"?" selected":""}>5</option>
            <option value="6"${set.rpe=="6"?" selected":""}>6</option>
            <option value="7"${set.rpe=="7"?" selected":""}>7</option>
            <option value="8"${set.rpe=="8"?" selected":""}>8</option>
          </select>
        </td>
        <td><input class="chk" type="checkbox" ${set.done ? "checked": ""}></td>
      `;
      // Hook inputs
      const [wEl, rEl, rpeEl, chkEl] = [
        tr.children[1].firstElementChild,
        tr.children[2].firstElementChild,
        tr.children[3].firstElementChild,
        tr.children[4].firstElementChild
      ];
      wEl.addEventListener("input", () => { set.weight = wEl.value; saveData(data); });
      rEl.addEventListener("input", () => { set.repsOrSec = rEl.value; saveData(data); });
      rpeEl.addEventListener("change", () => { set.rpe = rpeEl.value; saveData(data); });
      chkEl.addEventListener("change", () => { set.done = chkEl.checked; tr.className = set.done ? "done" : ""; saveData(data); });

      tbody.appendChild(tr);
    });
  });
}

// ---------- Actions ----------
document.getElementById("printBtn").addEventListener("click", () => window.print());

document.getElementById("resetDayBtn").addEventListener("click", () => {
  const dayName = loadActiveDay();
  if (!confirm("Clear entries for " + dayName + "?")) return;
  const data = loadData();
  ensureDayInit(data, dayName);
  // wipe values
  data[dayName].forEach(ex => ex.sets.forEach(s => { s.weight=""; s.repsOrSec=""; s.rpe=""; s.done=false; }));
  saveData(data);
  renderDay();
});

document.getElementById("newWeekBtn").addEventListener("click", () => {
  if (!confirm("Archive current week and start a new one?")) return;
  setNewWeek();
  renderTabs();
  renderDay();
  alert("New week started. (Your previous week was archived locally.)");
});

document.getElementById("exportBtn").addEventListener("click", () => {
  const wk = currentWeek();
  const data = loadData();
  const rows = [["weekOf","day","exercise","set","weight","repsOrSec","rpe","done","exportedAt"]];
  const now = new Date().toISOString();
  Object.entries(data).forEach(([day, exercises]) => {
    exercises.forEach(ex => {
      ex.sets.forEach(s => {
        rows.push([wk, day, ex.name, s.set, s.weight, s.repsOrSec, s.rpe, s.done ? "1":"0", now]);
      });
    });
  });
  const csv = rows.map(r => r.map(v => `"${String(v).replace(/"/g,'""')}"`).join(",")).join("\n");
  const blob = new Blob([csv], {type: "text/csv;charset=utf-8;"});
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = `rpe6-checklist-${wk}.csv`;
  a.click();
  URL.revokeObjectURL(url);
});

// ---------- Init ----------
renderTabs();
renderDay();
</script>
</body>
</html>
